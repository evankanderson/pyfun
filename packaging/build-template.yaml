apiVersion: build.knative.dev/v1alpha1
kind: BuildTemplate
metadata:
  name: pyfn
spec:
  parameters:
  - name: IMAGE
    description: The name of the image to push
  - name: DOCKERFILE
    description: Path to the Dockerfile to build.
    default: /workspace/Dockerfile

  timeout: 20m

  steps:
  - name: fill-in-framework
    image: alpine:3.8
    entrypoint: /bin/ash
    args:
    - '/bin/ash'
    - '-c'
    - 'mkdir /workspace/framework && cp /py-framework/Dockerfile /py-framework/config.py /py-framework/requirements.txt /workspace/framework/ && if ! [ -e /workspace/Dockerfile ]; then cp /workspace/framework/Dockerfile /workspace/Dockerfile; fi'
    volumeMounts:
    - mountPath: /py-framework
      name: py-function-framework
  - name: build-and-push
    image: gcr.io/kaniko-project/executor:v0.1.0
    args:
    - '--dockerfile=${DOCKERFILE}'
    - '--destination=${IMAGE}'

  volumes:
  - name:  py-function-framework
    configMap:
      name: builder-files
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: builder-files
data:
  Dockerfile: |
    FROM python:3.7-alpine

    WORKDIR /app

    # Copy the framework and application's requirements.txt and run pip to
    # install all dependencies. Alpine doesn't include gcc by default, so
    # install that before pip.
    COPY framework/requirements.txt /app/framework/requirements.txt
    COPY requirements.txt /app/requirements.txt
    RUN /bin/ash -c 'apk add build-base && pip install -r /app/framework/requirements.txt && pip install -r /app/requirements.txt'

    # Add the application source code.
    ADD . /app

    # Run a WSGI server to serve the application.
    CMD gunicorn -b :$PORT --access-logfile - --error-logfile -framework.config:app
  config.py: |
    from glob import glob
    import importlib
    import logging
    import os.path
    # This is needed to start gunicorn
    from pyfun_events.run import app

    if __name__ != '__main__':
        # Ensure logs go to the configured gunicorn location.
        gunicorn_logger = logging.getLogger('gunicorn.error')
        app.logger.handlers = gunicorn_logger.handlers
        app.logger.setLevel(gunicorn_logger.level)
        root_logger = logging.getLogger()
        root_logger.handlers = gunicorn_logger.handlers
        root_logger.setLevel(gunicorn_logger.level)

    for f in glob('*.py'):
        if not os.path.isfile(f):
            continue
        logging.info(f'Importing {f[:-3]}')
        try:
            importlib.import_module(f[:-3])
        except ImportError as error:
            logging.exception(error)
            logging.error(f'Error importing {f}: {error}')
        except Exception as e:
            logging.error(f'Error importing {f}: {e}')
            continue
    logging.info('Starting')

  requirements.txt: |
    pyfun_events>=0.2.1
    gunicorn
